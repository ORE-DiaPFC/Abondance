
> cat("=============================\n")
=============================

> cat("DIAGNOSTICS\n")
DIAGNOSTICS

> cat("=============================\n")
=============================

> if (nChains > 1) {
+	  cat("Convergence: gelman-Rubin R test\n")
+	  gelman.diag(fit.mcmc[,which(varnames(fit.mcmc)%in%parameterstotest)])
+	}

> cat("\n---------------------------\n")

---------------------------

> cat("Heidelberger and Welch's convergence diagnostic\n")
Heidelberger and Welch's convergence diagnostic

> cat("
+	heidel.diag is a run length control diagnostic based on a criterion of relative accuracy for the estimate of the mean. The default setting c ..." ... [TRUNCATED] 

heidel.diag is a run length control diagnostic based on a criterion of relative accuracy for the estimate of the mean. The default setting corresponds to a relative accuracy of two significant digits.

heidel.diag also implements a convergence diagnostic, and removes up to half the chain in order to ensure that the means are estimated from a chain that has converged.


> heidel.diag(fit.mcmc[,which(varnames(fit.mcmc)%in%parameterstotest)], eps=0.1, pvalue=0.05)
                                              
                Stationarity start     p-value
                test         iteration        
mu_p_srem       passed       601       0.0669 
sd_logit_p_srem passed       601       0.2366 
epsilon_p       passed       801       0.4381 
pi_dj           passed       601       0.1008 
zeta_alpha_dj   passed         1       0.1208 
mu_dj_nat       passed         1       0.0641 
k_cpue          passed       801       0.1195 
eta_cpue        passed         1       0.5970 
rho_s           passed         1       0.3307 
sd_s_rec        passed         1       0.3200 
p_cpue          passed         1       0.5303 
                                           
                Halfwidth Mean    Halfwidth
                test                       
mu_p_srem       passed      0.544 0.01652  
sd_logit_p_srem passed      1.024 0.03291  
epsilon_p       passed      0.504 0.01790  
pi_dj           passed      0.731 0.01765  
zeta_alpha_dj   passed      3.906 0.10157  
mu_dj_nat       passed      0.129 0.00664  
k_cpue          passed    130.697 3.53667  
eta_cpue        failed      2.127 0.79120  
rho_s           failed      0.177 0.01827  
sd_s_rec        passed      0.442 0.01248  
p_cpue          passed      0.628 0.04318  

> cat("\n---------------------------\n")

---------------------------

> cat("Geweke's convergence diagnostic\n")
Geweke's convergence diagnostic

> cat("
+	Geweke (1992) proposed a convergence diagnostic for Markov chains based on a test for equality of the means of the first and last part of a  ..." ... [TRUNCATED] 

Geweke (1992) proposed a convergence diagnostic for Markov chains based on a test for equality of the means of the first and last part of a Markov chain (by default the first 10% and the last 50%).
If the samples are drawn from the stationary distribution of the chain, the two means are equal and Geweke's statistic has an asymptotically standard normal distribution. 
The test statistic is a standard Z-score: the difference between the two sample means divided by its estimated standard error. The standard error is estimated from the spectral density at zero and so takes into account any autocorrelation.

The Z-score is calculated under the assumption that the two parts of the chain are asymptotically independent, which requires that the sum of frac1 and frac2 be strictly less than 1.


> geweke.diag(fit.mcmc[,which(varnames(fit.mcmc)%in%parameterstotest)], frac1 = 0.1, frac2 = 0.5)

Fraction in 1st window = 0.1
Fraction in 2nd window = 0.5 

      mu_p_srem sd_logit_p_srem       epsilon_p           pi_dj   zeta_alpha_dj       mu_dj_nat          k_cpue        eta_cpue 
         -6.641           7.805           6.139           1.559          -5.074           0.192          -5.779          -1.319 
          rho_s        sd_s_rec          p_cpue 
         -0.594           0.359          -1.285 


> cat("\n---------------------------\n")

---------------------------

> cat("Raftery and Lewis's diagnostic\n")
Raftery and Lewis's diagnostic

> raftery.diag(fit.mcmc[,which(varnames(fit.mcmc)%in%parameterstotest)], q=0.025, r=0.005, s=0.95, converge.eps=0.001)

Quantile (q) = 0.025
Accuracy (r) = +/- 0.005
Probability (s) = 0.95 

You need a sample size of at least 3746 with these values of q, r and s

> # Stop writing to the file
> sink()
